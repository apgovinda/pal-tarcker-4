# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to PKS

on:
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  PKS_CLOUD_API_KEY: api.pks.nilanjan.in
  CR_NAMESPACE: apgovinda
  REGISTRY_HOSTNAME: https://hub.docker.com
  IMAGE_NAME: pal-tracker
  PKS_CLUSTER: pks-workshop
  DEPLOYMENT_NAME: pal-tracker-deployment
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    #- name: Install IBM Cloud CLI
    #  run: |
    #    curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
    #    ibmcloud --version
    #    ibmcloud config --check-version=false
    #    ibmcloud plugin install -f kubernetes-service
    #    ibmcloud plugin install -f container-registry
    # pks login -a api.pks.nilanjan.in  pks-workshop -u palpks -k

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with PKS CLI
      run: |
        ./pks-utils/pkspal login --apikey "${PKS_CLOUD_API_KEY}" pks-workshop -u palpks -p DellEMC@123 -k
        docker login -u apgovinda -p keepitsimple
    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$CR_NAMESPACE"/"$IMAGE_NAME"

    - name: Push the image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$CR_NAMESPACE/$IMAGE_NAME
    - name: Deploy to PKS
      run: |
        kubectl config current-context
        kubectl apply -f pal-tracker-deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME

        kubectl get services -o wide
